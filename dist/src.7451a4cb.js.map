{"version":3,"sources":["src/sprites.js","src/rules.js","src/controls.js","src/Entity.js","src/map.js","src/canvas.js","src/index.js"],"names":["loadedCallback","filip","Image","onload","src","donut","needsWork","addRule","object","func","rules","name","push","createOrExecuteRule","first","second","isObject","isFunction","entities","forEach","entity","isText","become","updateRules","words","map","filter","middles","word","middle","left","x","y","right","top","bottom","keys","LEFT","UP","RIGHT","DOWN","window","onkeydown","e","keyCode","onkeyup","isKeyPressed","isValidMove","dx","dy","width","height","collidingEntity","includes","console","log","updateEntity","pushedEntities","pushedEntity","handleMove","now","Date","lastMove","functions","objects","Entity","color","sprite","Error","fillStyle","font","tileSize","textBaseline","textAlign","length","fillText","substr","drawImage","fillRect","bgColors","background","Math","min","canvas","document","getElementById","ctx","getContext","draw","clear","clientWidth","clientHeight","resize","innerWidth","innerHeight","update","loop","setInterval","onresize"],"mappings":"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","file":"src.7451a4cb.js","sourceRoot":"..","sourcesContent":["const loadedCallback = () => {};\n\nexport const filip = new Image();\nfilip.onload = loadedCallback;\nfilip.src = \"https://emoji.slack-edge.com/T02FQ6PQD/filip/4c26a9bd69d545cf.png\";\n\nexport const donut = new Image();\ndonut.onload = loadedCallback;\ndonut.src =\n  \"https://emoji.slack-edge.com/T02FQ6PQD/donut-raptor-donut/ea5974ac7a5dc2dc.png\";\n\nexport const needsWork = new Image();\nneedsWork.onload = loadedCallback;\nneedsWork.src =\n  \"https://emoji.slack-edge.com/T02FQ6PQD/needs_work/d3837a09b0adebb2.png\";\n","import { map } from \"./map\";\n\nconst addRule = (object, func) => {\n  if (!rules[object.name]) {\n    rules[object.name] = [];\n  }\n  rules[object.name].push(func.name);\n};\n\nexport let rules = {};\n\nconst createOrExecuteRule = (first, second) => {\n  if (first.isObject() && second.isFunction()) {\n    addRule(first, second);\n  }\n  if (first.isObject() && second.isObject()) {\n    map.entities.forEach(entity => {\n      if (!entity.isText && entity.name === first.name) {\n        entity.become(second);\n      }\n    });\n  }\n};\n\nexport const updateRules = () => {\n  rules = {};\n  const words = map.entities.filter(entity => entity.isText);\n  const middles = words.filter(word => word.name === \"IS\");\n  for (const middle of middles) {\n    const [left] = words.filter(\n      word => word.x === middle.x - 1 && word.y === middle.y\n    );\n    const [right] = words.filter(\n      word => word.x === middle.x + 1 && word.y === middle.y\n    );\n    const [top] = words.filter(\n      word => word.x === middle.x && word.y === middle.y - 1\n    );\n    const [bottom] = words.filter(\n      word => word.x === middle.x && word.y === middle.y + 1\n    );\n    if (left && right) {\n      createOrExecuteRule(left, right);\n    }\n    if (top && bottom) {\n      createOrExecuteRule(top, bottom);\n    }\n  }\n};\n","import { map } from \"./map\";\nimport { rules } from \"./rules\";\n\nconst keys = {};\n\nconst LEFT = 37;\nconst UP = 38;\nconst RIGHT = 39;\nconst DOWN = 40;\n\nwindow.onkeydown = e => {\n  keys[e.keyCode] = true;\n};\nwindow.onkeyup = e => {\n  keys[e.keyCode] = false;\n};\n\nexport const isKeyPressed = keyCode => keys[keyCode];\n\nconst isValidMove = (entity, dx, dy) => {\n  if (\n    entity.x + dx < 0 ||\n    entity.x + dx >= map.width ||\n    entity.y + dy < 0 ||\n    entity.y + dy >= map.height\n  )\n    return false;\n  const [collidingEntity] = map.entities.filter(\n    e => e.x === entity.x + dx && e.y === entity.y + dy\n  );\n  if (!collidingEntity) return true;\n  if (\n    rules[collidingEntity.name] &&\n    rules[collidingEntity.name].includes(\"WIN\")\n  ) {\n    console.log(\"WIN\");\n  }\n  if (\n    !collidingEntity.isText &&\n    rules[collidingEntity.name] &&\n    rules[collidingEntity.name].includes(\"STOP\")\n  )\n    return false;\n  if (\n    collidingEntity.isText ||\n    (rules[collidingEntity.name] &&\n      rules[collidingEntity.name].includes(\"PUSH\"))\n  ) {\n    return isValidMove(collidingEntity, dx, dy);\n  }\n  return true;\n};\n\nconst updateEntity = (entity, dx, dy) => {\n  const pushedEntities = map.entities.filter(\n    e => e.x === entity.x + dx && e.y === entity.y + dy\n  );\n  for (const pushedEntity of pushedEntities) {\n    if (\n      pushedEntity &&\n      (pushedEntity.isText ||\n        (rules[pushedEntity.name] && rules[pushedEntity.name].includes(\"PUSH\")))\n    ) {\n      updateEntity(pushedEntity, dx, dy);\n    }\n  }\n  entity.x += dx;\n  entity.y += dy;\n};\n\nexport const handleMove = entity => {\n  const now = new Date();\n  if (now - entity.lastMove > 100) {\n    let dx = 0;\n    let dy = 0;\n    if (keys[LEFT]) dx = -1;\n    if (keys[RIGHT]) dx = 1;\n    if (keys[DOWN] && dx === 0) dy = 1;\n    if (keys[UP] && dx === 0) dy = -1;\n    if (dx || dy) {\n      if (isValidMove(entity, dx, dy)) {\n        updateEntity(entity, dx, dy);\n        entity.lastMove = now;\n      }\n    }\n  }\n};\n","import { ctx } from \"./canvas\";\nimport { map } from \"./map\";\nimport { rules } from \"./rules\";\nimport { handleMove } from \"./controls\";\n\nconst functions = [\"YOU\", \"WIN\", \"STOP\"];\nconst objects = [\"FIFI\", \"SUGA\", \"WORK\"];\n\nexport class Entity {\n  constructor({ name, color, sprite, x, y, isText = false } = {}) {\n    this.color = color;\n    this.sprite = sprite;\n    this.name = name;\n    this.isText = isText;\n    this.x = x;\n    this.y = y;\n    this.lastMove = new Date();\n\n    if (!color && !sprite) throw new Error(\"I cant draw this!\");\n  }\n\n  isObject() {\n    return objects.includes(this.name);\n  }\n  isFunction() {\n    return functions.includes(this.name);\n  }\n  become(entity) {\n    this.color = entity.color;\n    this.name = entity.name;\n    this.sprite = entity.sprite;\n  }\n\n  update() {\n    if (this.isText) return;\n    if (rules[this.name] && rules[this.name].includes(\"YOU\")) {\n      handleMove(this);\n    }\n  }\n\n  draw() {\n    ctx.fillStyle = this.color;\n    ctx.font = `${map.tileSize / 2}px Monospace`;\n    ctx.textBaseline = \"middle\";\n    ctx.textAlign = \"center\";\n    if (this.isText) {\n      if (this.name.length === 4) {\n        ctx.fillText(\n          this.name.substr(0, 2),\n          this.x * map.tileSize + map.tileSize / 2,\n          this.y * map.tileSize + map.tileSize / 4\n        );\n        ctx.fillText(\n          this.name.substr(2),\n          this.x * map.tileSize + map.tileSize / 2,\n          this.y * map.tileSize + (map.tileSize * 3) / 4\n        );\n      } else {\n        ctx.fillText(\n          this.name,\n          this.x * map.tileSize + map.tileSize / 2,\n          this.y * map.tileSize + map.tileSize / 2\n        );\n      }\n    } else if (this.sprite) {\n      ctx.drawImage(\n        this.sprite,\n        this.x * map.tileSize,\n        this.y * map.tileSize,\n        map.tileSize,\n        map.tileSize\n      );\n    } else {\n      ctx.fillRect(\n        this.x * map.tileSize,\n        this.y * map.tileSize,\n        map.tileSize,\n        map.tileSize\n      );\n    }\n  }\n}\n","import { canvas } from \"./canvas\";\nimport { filip, donut, needsWork } from \"./sprites\";\nimport { Entity } from \"./Entity\";\n\nexport const bgColors = [\"#222222\", \"#272727\"];\n\nexport const map = {\n  background: [\n    [1, 0, 0, 0, 0, 1],\n    [0, 0, 0, 1, 0, 0],\n    [1, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 1, 0, 0, 1, 1],\n    [1, 0, 0, 0, 0, 0]\n  ],\n  entities: [\n    // new Entity({ x: 4, y: 5, name: \"SUGA\", sprite: donut }),\n    new Entity({ x: 0, y: 3, name: \"WORK\", sprite: needsWork }),\n    new Entity({ x: 1, y: 3, name: \"WORK\", sprite: needsWork }),\n    new Entity({ x: 3, y: 3, name: \"WORK\", sprite: needsWork }),\n    new Entity({ x: 4, y: 3, name: \"WORK\", sprite: needsWork }),\n    new Entity({\n      x: 1,\n      y: 1,\n      name: \"FIFI\",\n      sprite: filip,\n      color: \"#3c3c02\",\n      isText: true\n    }),\n    new Entity({ x: 2, y: 1, name: \"IS\", color: \"#fefefe\", isText: true }),\n    new Entity({ x: 3, y: 1, name: \"YOU\", color: \"#cc00cc\", isText: true }),\n    new Entity({\n      x: 1,\n      y: 5,\n      name: \"SUGA\",\n      sprite: donut,\n      color: \"#3c3c02\",\n      isText: true\n    }),\n    new Entity({ x: 2, y: 5, name: \"IS\", color: \"#fefefe\", isText: true }),\n    new Entity({ x: 3, y: 5, name: \"WIN\", color: \"#cc00cc\", isText: true }),\n    new Entity({\n      x: 2,\n      y: 2,\n      name: \"WORK\",\n      sprite: needsWork,\n      color: \"#3c3c02\",\n      isText: true\n    }),\n    new Entity({ x: 2, y: 3, name: \"IS\", color: \"#fefefe\", isText: true }),\n    new Entity({ x: 2, y: 4, name: \"STOP\", color: \"#cc00cc\", isText: true }),\n    new Entity({ x: 0, y: 0, name: \"FIFI\", sprite: filip })\n  ],\n  get tileSize() {\n    return Math.min(canvas.width / this.width, canvas.height / this.height);\n  },\n  get width() {\n    return this.background[0].length;\n  },\n  get height() {\n    return this.background.length;\n  }\n};\n","import { map, bgColors } from \"./map\";\n\nexport const canvas = document.getElementById(\"game\");\nexport const ctx = canvas.getContext(\"2d\");\n\nexport const draw = () => {\n  for (let y = 0; y < map.height; y++) {\n    for (let x = 0; x < map.width; x++) {\n      ctx.fillStyle = bgColors[map.background[y][x]];\n      ctx.fillRect(\n        x * map.tileSize,\n        y * map.tileSize,\n        map.tileSize,\n        map.tileSize\n      );\n    }\n  }\n  map.entities.forEach(entity => entity.draw());\n};\n\nexport const clear = () => {\n  ctx.fillStyle = \"#000\";\n  ctx.fillRect(0, 0, canvas.clientWidth, canvas.clientHeight);\n};\n\nexport const resize = () => {\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n};\n","import { clear, resize, draw } from \"./canvas\";\nimport { updateRules } from \"./rules\";\nimport { map } from \"./map\";\n\nconst update = () => {\n  updateRules();\n  map.entities.forEach(e => e.update());\n};\n\nconst loop = () => {\n  clear();\n  update();\n  draw();\n};\n\nresize();\nsetInterval(loop, 1000 / 30);\n\nwindow.onresize = resize;\n"]}